---
import { cn } from '@/lib/utils';
import { Icon } from 'astro-icon/components';

type ButtonVariant = 'default' | 'outline' | 'ghost' | 'secondary' | 'accent' | 'link' | 'destructive' | 'warning';
type ButtonSize = 'sm' | 'default' | 'lg' | 'icon';

interface Props {
  variant?: ButtonVariant;
  size?: ButtonSize;
  loading?: boolean;
  disabled?: boolean;
  href?: string;
  class?: string;
  type?: 'button' | 'submit' | 'reset';
  [key: string]: any;
}

const {
  variant = 'default',
  size = 'default',
  loading = false,
  disabled = false,
  href,
  class: className,
  type = 'button',
  ...rest
}: Props = Astro.props;

const baseClassName = cn(
  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-base font-medium transition-colors focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-neutral focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-5 [&_svg]:shrink-0 cursor-pointer',
  size === 'sm' && 'h-9 px-3',
  size === 'default' && 'h-10 px-4 py-2',
  size === 'lg' && 'h-11 px-8',
  size === 'icon' && 'h-10 w-10',
  // Main variants using semantic colors
  variant === 'default' && 'bg-primary text-primary-content hover:bg-primary/90',
  variant === 'secondary' && 'bg-secondary text-secondary-content hover:bg-secondary/90',
  variant === 'accent' && 'bg-accent text-accent-content hover:bg-accent/90',
  variant === 'warning' && 'bg-warning text-warning-content hover:bg-warning/90',
  variant === 'destructive' && 'bg-error text-error-content hover:bg-error/90',
  // Special variants
  variant === 'outline' && 'border border-base-300  text-base-content hover:bg-base-300',
  variant === 'ghost' && 'text-base-content hover:bg-base-300',
  variant === 'link' && 'text-primary underline-offset-4 hover:underline',
  disabled && 'pointer-events-none opacity-50',
  loading && 'pointer-events-none opacity-70',
  className,
);
---

{
  href ? (
    <a href={href} class={baseClassName} {...rest}>
      {loading ? (
        <div class='flex items-center gap-2'>
          <Icon name='lucide:loader-2' class='animate-spin' />
          <slot />
        </div>
      ) : (
        <slot />
      )}
    </a>
  ) : (
    <button type={type} class={baseClassName} disabled={disabled || loading} {...rest}>
      {loading ? (
        <div class='flex items-center gap-2'>
          <Icon name='lucide:loader-2' class='animate-spin' />
          <slot />
        </div>
      ) : (
        <slot />
      )}
    </button>
  )
}
