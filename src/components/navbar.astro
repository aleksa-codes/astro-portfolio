---
import { cn } from '@/lib/utils';
import ThemeToggle from '@/components/theme-toggle.astro';
import { Icon } from 'astro-icon/components';
import Button from '@/components/ui/button.astro';
import ContactButton from '@/components/ui/contact-button.astro';
import SnowToggle from '@/components/snow-toggle.astro';
import { siteConfig } from '@/config/site.config';
import Tooltip from '@/components/ui/tooltip.astro';

interface NavLink {
  href: string;
  label: string;
  dropdown?: {
    href: string;
    label: string;
  }[];
}

const navigationLinks: NavLink[] = siteConfig.navigation;

const isCurrentPage = (href: string) => {
  let pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
  if (pathname.at(0) !== '/') pathname = '/' + pathname;
  if (pathname.at(-1) !== '/') pathname += '/';
  return pathname === href || (href !== '/' && pathname.startsWith(href));
};
---

<header
  id='navbar'
  data-scroll='top'
  class='data-[scroll=scrolled]:border-base-300 data-[scroll=scrolled]:bg-base-100/80 sticky top-0 z-40 w-full pt-4 pb-2 data-[scroll=scrolled]:border-b data-[scroll=scrolled]:shadow-sm data-[scroll=scrolled]:backdrop-blur-xs md:pt-6 md:pb-4'
  aria-label='Main navigation'
>
  <div class='container flex items-center justify-between'>
    <!-- Left section: Logo only -->
    <a class='hover:text-secondary text-lg font-bold md:text-2xl' href='/' aria-label='Home'>
      <span id='typewriter' class="after:animate-blink after:ml-0.5 after:font-bold after:content-['|']"
        >aleksa.codes</span
      >
    </a>

    <!-- Right section: Navigation + Theme Toggle + CTA -->
    <nav class='flex items-center gap-2'>
      <!-- Desktop Navigation -->
      <ul class='hidden items-center gap-2 lg:flex' aria-label='Desktop navigation'>
        {
          navigationLinks.map(({ href, label, dropdown }) => (
            <li class='group relative'>
              {dropdown ? (
                <Button
                  variant='ghost'
                  aria-expanded='false'
                  aria-controls={`desktop-dropdown-${label.toLowerCase().replace(/\s+/g, '-')}`}
                  aria-haspopup='true'
                >
                  {label}
                  <Icon
                    name='lucide:chevron-down'
                    class='size-4 transition-transform duration-300 group-focus-within:rotate-180 group-hover:rotate-180'
                    aria-hidden='true'
                  />
                </Button>
              ) : (
                <Button
                  variant='ghost'
                  href={href}
                  class={cn(isCurrentPage(href) && 'text-secondary font-medium')}
                  aria-current={isCurrentPage(href) ? 'page' : null}
                >
                  {label}
                </Button>
              )}
              {dropdown && (
                <ul
                  id={`desktop-dropdown-${label.toLowerCase().replace(/\s+/g, '-')}`}
                  class='border-base-300 bg-base-100 invisible absolute top-full left-0 z-50 mt-2 min-w-40 translate-y-2 rounded-md border p-2 opacity-0 shadow-md transition-all duration-300 group-focus-within:visible group-focus-within:translate-y-0 group-focus-within:opacity-100 group-hover:visible group-hover:translate-y-0 group-hover:opacity-100'
                  role='menu'
                  aria-orientation='vertical'
                  aria-labelledby={`dropdown-${label.toLowerCase().replace(/\s+/g, '-')}-button`}
                >
                  {dropdown.map((item) => (
                    <li>
                      <a
                        href={item.href}
                        class={cn(
                          'text-base-content/80 hover:bg-base-200 hover:text-base-content focus:bg-base-200 focus:text-base-content block rounded-md px-4 py-2 text-sm transition-colors focus:outline-hidden',
                          isCurrentPage(item.href) && 'text-secondary font-medium',
                        )}
                        role='menuitem'
                        aria-current={isCurrentPage(item.href) ? 'page' : null}
                      >
                        {item.label}
                      </a>
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))
        }
      </ul>

      <!-- Action Buttons and Toggles -->
      <div class='flex items-center gap-2'>
        <!-- Social Links and Toggles -->
        <div class='flex items-center gap-2'>
          <ul class='hidden items-center gap-2 lg:flex'>
            <li>
              <Tooltip text='GitHub' direction='bottom' variant='info'>
                <Button
                  variant='ghost'
                  size='icon'
                  href='https://github.com/aleksa-codes'
                  target='_blank'
                  rel='noopener noreferrer'
                  aria-label='GitHub Profile'
                >
                  <Icon name='lucide:github' class='size-5' />
                </Button>
              </Tooltip>
            </li>
            <li>
              <Tooltip text='Resume' direction='bottom' variant='success'>
                <Button
                  variant='ghost'
                  size='icon'
                  href='/Aleksa_Resume_2025.pdf'
                  target='_blank'
                  rel='noopener noreferrer'
                  aria-label='Resume'
                >
                  <Icon name='lucide:file-text' class='size-5' />
                </Button>
              </Tooltip>
            </li>
            <li>
              <Tooltip text='RSS' direction='bottom' variant='warning'>
                <Button
                  variant='ghost'
                  size='icon'
                  href='/rss.xml'
                  target='_blank'
                  rel='noopener noreferrer'
                  aria-label='RSS Feed'
                >
                  <Icon name='lucide:rss' class='size-5' />
                </Button>
              </Tooltip>
            </li>
          </ul>
          <SnowToggle />
          <ThemeToggle />
        </div>

        <!-- Contact Button (Desktop) -->
        <ContactButton isJobHunting={true} />

        <!-- Mobile Menu Trigger -->
        <Button
          id='mobile-menu-button'
          variant='outline'
          size='icon'
          class='lg:hidden'
          aria-label='Toggle menu'
          aria-expanded='false'
          aria-controls='mobile-menu'
        >
          <Icon name='lucide:menu' class='size-5' />
        </Button>
      </div>
    </nav>
  </div>
</header>

<!-- Mobile Menu Panel -->
<aside
  id='mobile-menu'
  data-state='closed'
  class='fixed inset-0 z-50 h-screen data-[state=closed]:pointer-events-none lg:hidden'
  aria-label='Mobile navigation menu'
>
  <!-- Backdrop overlay -->
  <div
    id='mobile-menu-backdrop'
    class='bg-neutral/80 fixed inset-0 cursor-pointer transition-opacity duration-300 data-[state=closed]:pointer-events-none data-[state=closed]:opacity-0'
    data-state='closed'
    aria-hidden='true'
  >
  </div>
  <!-- Mobile navigation panel -->
  <nav
    id='mobile-menu-panel'
    data-state='closed'
    class='bg-base-100 fixed top-0 right-0 z-50 flex h-full w-72 flex-col px-6 py-4 shadow-lg transition-transform duration-300 data-[state=closed]:translate-x-full data-[state=open]:translate-x-0'
    aria-label='Mobile navigation'
  >
    <!-- Mobile menu header -->
    <div class='flex items-center justify-between'>
      <ul class='flex items-center gap-2'>
        <li>
          <Button
            variant='ghost'
            size='icon'
            aria-label='GitHub Profile'
            href='https://github.com/aleksa-codes'
            target='_blank'
            rel='noopener noreferrer'
          >
            <Icon name='lucide:github' class='size-5' />
          </Button>
        </li>
        <li>
          <Button
            variant='ghost'
            size='icon'
            aria-label='Resume'
            href='/Aleksa_Resume_2025.pdf'
            target='_blank'
            rel='noopener noreferrer'
          >
            <Icon name='lucide:file-text' class='size-5' />
          </Button>
        </li>
        <li>
          <Button
            variant='ghost'
            size='icon'
            aria-label='RSS Feed'
            href='/rss.xml'
            target='_blank'
            rel='noopener noreferrer'
          >
            <Icon name='lucide:rss' class='size-5' />
          </Button>
        </li>
      </ul>
      <Button id='mobile-menu-close' variant='ghost' size='icon' aria-label='Close menu'>
        <Icon name='lucide:x' class='size-5' aria-hidden='true' />
      </Button>
    </div>
    <hr class='bg-base-300 my-4' role='separator' />
    <!-- Mobile navigation links -->
    <ul class='flex flex-col gap-4 overflow-y-auto'>
      <li>
        <a
          href='/'
          class={cn('block py-2', isCurrentPage('/') ? 'text-secondary font-medium' : 'hover:text-secondary')}
          aria-current={isCurrentPage('/') ? 'page' : null}
        >
          Home
        </a>
      </li>
      {
        navigationLinks.map(({ href, label, dropdown }) => (
          <li>
            {dropdown ? (
              <button
                class='group hover:text-secondary focus-visible:ring-primary flex w-full items-center justify-between rounded-md py-2 focus:outline-hidden focus-visible:ring-2'
                data-nav-trigger
                data-state='closed'
                aria-expanded='false'
                aria-controls={`dropdown-${label.toLowerCase().replace(/\s+/g, '-')}`}
                aria-haspopup='true'
                id={`dropdown-${label.toLowerCase().replace(/\s+/g, '-')}-button`}
              >
                <span>{label}</span>
                <Icon
                  name='lucide:chevron-down'
                  class='size-4 transition-transform duration-300 group-data-[state=open]:rotate-180'
                  data-nav-icon
                  aria-hidden='true'
                />
              </button>
            ) : (
              <a
                href={href}
                class={cn('block py-2', isCurrentPage(href) ? 'text-secondary font-medium' : 'hover:text-secondary')}
                aria-current={isCurrentPage(href) ? 'page' : null}
              >
                {label}
              </a>
            )}
            {dropdown && (
              <ul
                id={`dropdown-${label.toLowerCase().replace(/\s+/g, '-')}`}
                class='space-y-2 pl-4 data-[state=closed]:hidden data-[state=open]:block'
                data-nav-content
                data-state='closed'
                role='menu'
                aria-orientation='vertical'
                aria-labelledby={`dropdown-${label.toLowerCase().replace(/\s+/g, '-')}-button`}
              >
                {dropdown.map((item) => (
                  <li>
                    <a
                      href={item.href}
                      class={cn(
                        'hover:text-secondary text-base-content/80 block py-2 text-sm transition-colors focus:outline-hidden',
                        isCurrentPage(item.href) && 'text-secondary font-medium',
                      )}
                      role='menuitem'
                      aria-current={isCurrentPage(item.href) ? 'page' : null}
                    >
                      {item.label}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </li>
        ))
      }
      <li>
        <ContactButton mobile={true} isJobHunting={true} />
      </li>
    </ul>
  </nav>
</aside>

<script>
  // document.addEventListener('astro:page-load', () => {
  // Type definitions
  type State = 'open' | 'closed';

  // DOM Elements
  const navbar = document.getElementById('navbar');
  const mobileMenu = document.getElementById('mobile-menu');
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenuClose = document.getElementById('mobile-menu-close');
  const mobileMenuBackdrop = document.getElementById('mobile-menu-backdrop');
  const mobileMenuPanel = document.getElementById('mobile-menu-panel');
  const navTriggers = document.querySelectorAll('[data-nav-trigger]');

  // Navbar scroll behavior
  function updateNavbarScroll() {
    navbar?.setAttribute('data-scroll', window.scrollY > 0 ? 'scrolled' : 'top');
  }

  // State management
  function toggleMenu(isOpen: boolean) {
    const state: State = isOpen ? 'open' : 'closed';
    [mobileMenu, mobileMenuBackdrop, mobileMenuPanel].forEach((el) => el?.setAttribute('data-state', state));
    mobileMenuButton?.setAttribute('aria-expanded', String(isOpen));

    // Prevent scrolling when mobile menu is open
    document.body.style.overflow = isOpen ? 'hidden' : '';
  }

  function toggleDropdown(trigger: HTMLElement, isExpanded: boolean) {
    const state: State = isExpanded ? 'open' : 'closed';
    trigger.setAttribute('aria-expanded', String(isExpanded));
    trigger.setAttribute('data-state', state);

    const content = document.getElementById(trigger.getAttribute('aria-controls') || '');
    content?.setAttribute('data-state', state);
  }

  // Event Listeners

  window.addEventListener('scroll', updateNavbarScroll);
  mobileMenuButton?.addEventListener('click', () => toggleMenu(true));
  mobileMenuClose?.addEventListener('click', () => toggleMenu(false));
  mobileMenuBackdrop?.addEventListener('click', () => toggleMenu(false));
  document.addEventListener('keydown', (e) => e.key === 'Escape' && toggleMenu(false));

  navTriggers.forEach((trigger) => {
    if (trigger instanceof HTMLElement) {
      trigger.addEventListener('click', () => {
        const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
        toggleDropdown(trigger, !isExpanded);
      });
    }
  });
  // });
</script>

<script>
  function typeText(element: HTMLElement, text: string, speed = 150) {
    // Clear existing content first
    element.textContent = '';
    let index = 0;
    element.classList.remove('after:animate-blink');

    function type() {
      if (index < text.length) {
        element.textContent += text.charAt(index);
        index++;
        setTimeout(type, speed);
      } else {
        element.classList.add('after:animate-blink');
      }
    }

    // Add a small delay before starting the typing effect
    setTimeout(() => {
      type();
    }, 500);
  }

  document.addEventListener('DOMContentLoaded', () => {
    const logoElement = document.getElementById('typewriter');
    if (logoElement instanceof HTMLElement) {
      typeText(logoElement, 'aleksa.codes', 150);
    }
  });
</script>
