---
import type { CollectionEntry } from 'astro:content';
import Breadcrumb from '@/components/breadcrumb.astro';
import Layout from '@/layouts/layout.astro';
import { siteConfig } from '@/config/site.config';
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';
import { tagToSlug, calculateReadingTime } from '@/lib/utils';
import Badge from '@/components/ui/badge.astro';

interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const { title, description, date, author, thumbnail, tags } = post.data;
const readingTime = calculateReadingTime(post.body!);

// Generate OG image URL
const ogImage = new URL(`/open-graph/${post.id}.png`, Astro.url).toString();

// Format date for display
const readableDate = date.toLocaleDateString('en-us', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});
---

<Layout
  title={title}
  description={description}
  image={ogImage}
  ogType='article'
  twitterCreator={siteConfig.twitter.creator}
  twitterSite={siteConfig.twitter.site}
  schema={{
    type: 'BlogPosting',
    date,
    author,
    tags,
  }}
>
  <div class='bg-base-200 fixed top-16 z-40 h-0.5 w-full opacity-0 transition-opacity duration-300 md:top-20'>
    <div class='bg-secondary h-full w-0 transition-all duration-150' id='progress-bar'></div>
  </div>

  <section class='container space-y-6'>
    <Breadcrumb />

    <div class='mx-auto max-w-3xl space-y-6'>
      <div class='space-y-6 text-left'>
        <h1 class='text-base-content text-4xl font-bold'>{title}</h1>
        <div class='text-base-content/80 flex items-center gap-2 text-sm'>
          <span class='flex items-center gap-1'>
            <Icon name='lucide:clock' class='size-4' />
            {readingTime} min read
          </span>
          <div>â€¢</div>
          <span class='flex items-center gap-1'>
            <Icon name='lucide:calendar' class='size-4' />
            <time datetime={date.toISOString()}>{readableDate}</time>
          </span>
        </div>
        {
          thumbnail && (
            <Image
              src={thumbnail}
              alt={title}
              format='webp'
              quality='max'
              layout={'full-width'}
              class='aspect-video w-full rounded-md object-cover'
            />
          )
        }
      </div>

      <article
        class='font-roboto prose prose-h2:text-base-content prose-h1:text-base-content prose-h3:text-base-content prose-h4:text-base-content prose-a:text-base-content lg:prose-lg dark:prose-invert prose-code:before:hidden prose-code:after:hidden prose-strong:text-base-content prose-img:rounded-md prose-h1:font-sans prose-h2:font-sans prose-h3:font-sans prose-h4:font-sans max-w-none'
      >
        <slot />
      </article>

      {
        tags?.length > 0 && (
          <div class='mt-8 flex flex-wrap gap-2'>
            {tags.map((tag) => (
              <Badge as='a' href={`/blog/${tagToSlug(tag)}`}>
                {tag}
              </Badge>
            ))}
          </div>
        )
      }

      <!-- Comments Section -->
      <div class='w-full'>
        <h2 class='text-base-content mb-8 text-2xl font-bold tracking-tight'>Comments</h2>
        <script
          is:inline
          src='https://giscus.app/client.js'
          data-repo='aleksa-codes/astro-portfolio'
          data-repo-id='R_kgDOH9bAGg'
          data-category='Announcements'
          data-category-id='DIC_kwDOH9bAGs4CmQFv'
          data-mapping='pathname'
          data-strict='0'
          data-reactions-enabled='1'
          data-emit-metadata='0'
          data-input-position='top'
          data-theme='dark'
          data-lang='en'
          crossorigin='anonymous'
          async></script>
      </div>
    </div>
  </section>
</Layout>

<script>
  const progressBar = document.querySelector('#progress-bar') as HTMLDivElement;
  const progressContainer = progressBar?.parentElement as HTMLDivElement;

  if (progressBar && progressContainer) {
    const updateProgress = () => {
      const totalHeight = document.documentElement.scrollHeight - window.innerHeight;
      const progressWidth = (window.scrollY / totalHeight) * 100;
      progressBar.style.width = `${progressWidth}%`;
      progressContainer.style.opacity = progressWidth === 0 ? '0' : '1';
    };

    window.addEventListener('scroll', updateProgress);
    // Initial update
    updateProgress();
  }
</script>

<script>
  function updateGiscusTheme() {
    const isDark = document.documentElement.classList.contains('dark');
    const giscusTheme = isDark ? 'dark' : 'light';

    const iframe = document.querySelector<HTMLIFrameElement>('iframe.giscus-frame');
    if (!iframe) return;

    iframe.contentWindow?.postMessage(
      {
        giscus: {
          setConfig: {
            theme: giscusTheme,
          },
        },
      },
      'https://giscus.app',
    );
  }

  // Update theme when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    // Wait for Giscus to load
    setTimeout(updateGiscusTheme, 2000);
  });

  // Listen for theme changes
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
        updateGiscusTheme();
      }
    });
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['class'],
  });
</script>
